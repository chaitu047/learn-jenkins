pipeline {

    agent {
        node {
            label 'AGENT-1'
        }
    }

    environment {
        packageVersion = ''
    }

    options {
        timeout(time: 1, unit: 'HOURS')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }

    stages {

        stage("Get Version"){
            steps{
                script {
                    def packageJson = readJSON file: "catalogue/package.json"
                    packageVersion = packageJson.version
                    echo "application version: $packageVersion"
                }
            }
        }

        stage("Install dependencies") {
            steps {
                sh """
                    cd catalogue
                    npm install
                """
            }
        }

        stage("Build Artifcat") {
            steps {
                sh """
                cd catalogue
                zip -q -r catalogue.zip ./* -x ".git" -x "catalogue.zip"
                mv catalogue.zip /home/centos/catalogue.zip
                """
            }
        }

        stage("Artifact Uploader") {
            steps {
            nexusArtifactUploader (
                nexusVersion: 'nexus3',
                protocol: 'http',
                nexusUrl: '54.161.195.143:8081',
                groupId: 'com.roboshop',
                version: '${packageVersion}',
                repository: 'catalogue',
                credentialsId: 'nexus-auth',
                artifacts: [
                    [artifactId: 'catalogue',
                    classifier: '',
                    file: 'catalogue.zip',
                    type: 'zip']
                ]
            )
            }
        }

        stage("Test"){

            steps{
                echo "Testing"
            }

        }

        stage("Deploy"){

            steps {
                echo "Deploy"
            }

        }
    }
    post{
        always{
            echo "========always========"
            deleteDir()
        }
        success{
            echo "========pipeline executed successfully ========"
        }
        failure{
            echo "========pipeline execution failed========"
        }
    }
}